{
  "name": "Gcellbeaconscanner android",
  "tagline": "Example Android Studio Project using the GCellBeaconScan Library to detect nearby beacons.",
  "body": "# GCellBeaconScanner Android\r\nExample Android Studio Project using the GCellBeaconScan aar Library to detect nearby iBeacon devices.\r\n\r\nThis project is an example Android Studio project that uses the GCellBeaconScanner aarLibrary to easily set up and detect proximity to nearby iBeacon devices. \r\n\r\nFor more information about iBeacons, potential applications, the Framework and other software support such as platforms please contact us at [GCell ibeacon.solar](http://www.ibeacon.solar).\r\n\r\nLatest version: v1_0 (08 August 2016)\r\n\r\nThe *gcellbeaconscanlibrary* module provides all the tools you need to start scanning for iBeacon devices in Android with minimal code. The library allows the developer to scan for nearby iBeacon devices in two ways:\r\n\r\n1. Return a list of all nearby iBeacon devices, regardless of their UUID.\r\n2. Return only information on iBeacon devices from pre-determined Beacon Regions. You can monitor and range these regions, in a method very similar to that used in iOS. \r\n \r\nThere are 4 classes, the one that you will interact most with is the GCellBeaconScanManager\r\nThis class handles the Bluetooth scans and returns any scanned devices in range that have an appropriate advertising packet. E.g., once initialized and running it returns callbacks based on what beacons are ranged. This are returned every 1 second in the form of an array list. \r\n\r\nBeacons are flushed from the list if they havenâ€™t been seen for x seconds, as defined by setBeaconAutoRefreshRate, this defaults to 10s to match iOS. During this interval the RSSI of any beacon that may have just gone out of range is set to 0 and proximity unknown.\r\n\r\n### Java Documentation & Overview\r\nFor Java documentation please see the repository [docs](https://htmlpreview.github.io/?https://raw.githubusercontent.com/david-pugh-gcell/GCellBeaconScanner_Android/master/GCellBeaconDocs/index.html).\r\n\r\n###Compatibility\r\nThe library is designed and tested to work with Android 4.3 (API Level 18) onwards. This API introduces built-in platform support for Bluetooth Low Energy to scan and discover devices. \r\n\r\n# Using the Library\r\n\r\n##Adding the Library to your Project\r\n1. Download and Copy the **gcellbeaconscanlibrary-release-vX.aar** file into the libs folder in your Android Studio Project.\r\n2. Within your app build.gradle file add the following entry to allow the app to see the library locally\r\n\r\n````xml\r\n  repositories {\r\n        flatDir{\r\n            dirs 'libs'\r\n        }\r\n    }\r\n````\r\n\r\n3. and add the aar as a dependency\r\n\r\n````xml\r\ndependencies {\r\n    compile(name:'gcellbeaconscanlibrary-release-v1-0', ext: 'aar')\r\n}\r\n````\r\n\r\n##Setting Permissions\r\nIn order to detect beacons your app will need to have manifest permission to access to Bluetooth and your location. To enable these permissions add the following entries to the AndroidManifest.xml file in your app. \r\n\r\n````xml\r\n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\"/>\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH\" />\r\n    <uses-permission android:name=\"android.permission.BLUETOOTH_ADMIN\" />\r\n````\r\nThe library will automatically check for user permissions and the status of Bluetooth Low Energy (BLE) on the device and is compatible with Marshmallow. \r\n\r\n## Import the class definitions\r\n\r\n````java\r\nimport com.gcell.ibeacon.gcellbeaconscanlibrary.GCellBeaconRegion;\r\nimport com.gcell.ibeacon.gcellbeaconscanlibrary.GCellBeaconScanManager;\r\nimport com.gcell.ibeacon.gcellbeaconscanlibrary.GCellBleDevice;\r\nimport com.gcell.ibeacon.gcellbeaconscanlibrary.GCellUuid;\r\n````\r\n\r\n## Implement GCellBeaconManagerScanEvents interface and Implement methods\r\n````java\r\n public class MainActivity extends Activity implements GCellBeaconScanManager.GCellBeaconManagerScanEvents{\r\n````\r\n\r\n````java\r\n\t // region Handle BeaconScanManager Events\r\n\r\n\t // This event means the scan manager has updated the ranged beacon list\r\n\t public void onGCellUpdateBeaconList(List<GCellBleDevice> disc_gcell_beacons) {\r\n\t\t Log.i(TAG, \"Beacons found: \" + disc_gcell_beacons.size());\r\n\t }\r\n\r\n\t // This event means the device has enetred a beacon region. To find out more about what beacons are in the region, start ranging.\r\n\t // This will return beacon UUID, Major, Minor and RSSI values\r\n\t public void didEnterBeaconRegion(GCellBeaconRegion region) {\r\n\t\t Log.i(TAG, \"Entered region: \" + region.toString());\r\n\t\t mbtManager.startRangingforRegion(region);\r\n\t }\r\n\r\n\t // The device has exited a region, we can now stop ranging for that region to save battery\r\n\t public void didExitBeaconRegion(GCellBeaconRegion region) {\r\n\t\t Log.i(TAG, \"Exited region: \" + region.toString());\r\n\t\t mbtManager.stopRangingforRegion(region);\r\n\t }\r\n\r\n\t // Beacons within a region have been ranged - we now have a list of beacons and their values\r\n\t public void didRangeBeaconsinRegion(GCellBeaconRegion region, List<GCellBleDevice> disc_gcell_beacons) {\r\n\t\t Log.i(TAG, \"Beacons found in region: \" + disc_gcell_beacons.size() + \" \" + region.toString());\r\n\r\n\t }\r\n\r\n\t // The user has denied permission for coarse location.\r\n\t public void locationPermissionsDenied(){\r\n\t\t mbtManager.stopScanningForBeacons();\r\n\t }\r\n\r\n\t // Bluetooth Low Energy (BLE) is not supported for this device\r\n\t public void bleNotSupported() {\r\n\r\n\t }\r\n\r\n\t // BLE is not on for this device\r\n\t public void bleNotEnabled() {\r\n\t\t Log.i(TAG, \"BLE not enabled\");\r\n\r\n\t }\r\n\t// endregion\r\n````\r\n\r\n## Add Permission Handler\r\nIn order to ask user for relevant permission in Marshmallow, you need to implement a *onRequestPermissionResult* method. This just calls the *permissionResult* method in the GCellBeaconScanmanager which will deal with the values. \r\n\r\n````java\r\n\r\n\t // region Handling permission request\r\n\t /**\r\n\t  * This allows us to deal with Location permissions from the user - it allows the library to handle any feedback calls\r\n\t  * IT overrides the Activity onrequestPermissionsResult\r\n\t  * @param requestCode\r\n\t  * @param permissions\r\n\t  * @param grantResults\r\n\t  */\r\n\t @Override\r\n\t public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {\r\n\t\t mbtManager.permissionResult(requestCode, permissions, grantResults);\r\n\t }\r\n\r\n \t// end region\r\n````\r\n\r\n#Using the library\r\nNow the set up is complete, its time to start using the library. The first task is to create an instance object of GCellBeaconScanmanager\r\nDeclare a GCellBeaconScanmanager as an instance variable:\r\n````java\r\nprivate GCellBeaconScanManager mbtManager;\r\n````\r\n\r\nThen create an instance within the onCreate method of your Activity:\r\n\r\n````java\r\n\t\t// set up scan manager\r\n\t\tmbtManager = new GCellBeaconScanManager(this);\r\n````\r\n\r\n\r\nThere are two ways to use the library:\r\n\r\n## Scanning for Regions\r\nThis method will be familar to anyone who has used iBeacon within iOS. Beacon regions are defined and information about whether you are within these regions and what beacons that correspond to that region are returned. \r\nTo use this method, set the *useBeaconRegions* to true.\r\n````java\r\n\t\t//use known regions\r\n\t\tmbtManager.useBeaconRegions(true);\r\n````\r\n### Defining a Beacon region\r\nBeacon regions can be defined by their proximity UUID only, Proximity UUID and Major number or by the proximity UUID, Major and Minor Numbers. This gives developers flexibility in how they define iBeacon projects and infastructure. The GCellBeaconRegion class has a number of constructures corresponding to these different definitions, but you can also automatically define a region based on the default GCell UUID.\r\n\r\n````java\r\nGCellBeaconRegion gCellRegion = new GCellBeaconRegion(); //Sending no parameters initiates a region using the Default GCell UUID\r\nGCellBeaconRegion otherRegion = new GCellBeaconRegion(new GCellUuid(\"6953fD4f-cfAF-ff58-a9cf-574A5E383c24\"), \"com.other\");\r\n````\r\n\r\nThen just add these regions to the manager as an ArrayList\r\n\r\n````java\r\n\t private ArrayList<GCellBeaconRegion> beaconRegions = new ArrayList<GCellBeaconRegion>();\r\n\t \t....\r\n\t beaconRegions.add(gCellRegion);\r\n\tmbtManager.setBeaconRegions(beaconRegions);\r\n````\r\nThen just start monitoring for these regions.\r\n\t\t\r\n````java\r\n\tmbtManager.startMonitoringForBeacons();\r\n````\r\n\r\nThe library will monitor for BLE devices in low power mode; if any iBeacon devices are in range that correspond to the Beacon Regions defined, the library will call the *didEnterRegion* method. To start to get more details of the beacons in that region, then call teh *startMonitoringForBeaconinRegion* method.\r\n\r\n````java\r\n\t// This event means the device has enetred a beacon region. To find out more about what beacons are in the region, start ranging.\r\n\t // This will return beacon UUID, Major, Minor and RSSI values\r\n\tpublic void didEnterBeaconRegion(GCellBeaconRegion region) {\r\n\t mbtManager.startRangingforRegion(region);\r\n\t}\r\n````\r\n\t \r\n Details of the iBeacon devices in range will then be returned via the \r\n````java\r\n\t \t // Beacons within a region have been ranged - we now have a list of beacons and their values\r\n\t public void didRangeBeaconsinRegion(GCellBeaconRegion region, List<GCellBleDevice> disc_gcell_beacons) {\r\n\t\t Log.i(TAG, \"Beacons found in region: \" + disc_gcell_beacons.size() + \" \" + region.toString());\r\n\t }\r\n````\r\n\r\n## Scanning for all iBeacon Devices\r\nYou can also scan and return a list of all nearby iBeacon devices regardless of their UUID, Major and Minor settings. In this case set *useBeaconRegions* to false and just start scanning \r\n````java\r\nmbtManager.useBeaconRegions(false);\r\nmbtManager.startScanningForBeacons();\r\n````\r\nThis method of operation can be easier to set up, but can be more power hungry and can also leave you with a large list of beacon devices that you then have to manage yourself. These will be returned via * onGCellUpdateBeaconList*.\r\n````java\r\n\t public void onGCellUpdateBeaconList(List<GCellBleDevice> disc_gcell_beacons) {\r\n\t\t Log.i(TAG, \"Beacons found: \" + disc_gcell_beacons.size());\r\n\t }\r\n````\r\n## Fine tuning the Library\r\n````java\r\n\t\t/////////// You can also tweak other settings\r\n\t\t// Switch debug to true to get feedback from the library during development\r\n\t\tmbtManager.deBug = true;\r\n\t\t// Set the library to automatically switch BLE on if it is off or switched off\r\n\t\tmbtManager.autoSwitchOnBlueTooth = true;\r\n\t\t// Set the auto-refresh rate in seconds \r\n\t\tmbtManager.setBeaconAutoRefreshRate(20);\r\n````\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}